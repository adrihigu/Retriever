


# .abs__InterruptVectorTable
  00000000 0000019C .abs    InterruptVectorTable	(Vectors_c.obj)

# .abs_NVPROT_INIT
  0000040D 00000001 .abs    NVPROT_INIT	(Cpu_c.obj)

# .abs_NVOPT_INIT
  0000040F 00000001 .abs    NVOPT_INIT	(Cpu_c.obj)
#>00000400          ___heap_size (linker command file)
#>00000400          ___stack_size (linker command file)
#>00800000          ___RAM_ADDRESS (linker command file)
#>00002000          ___RAM_SIZE (linker command file)
#>00000000          ___FLASH_ADDRESS (linker command file)
#>00020000          ___FLASH_SIZE (linker command file)

# .userram

# .code

# .text
  00000410 00000030 .text   TI2_Init	(TI2_c.obj)
  00000440 00000022 .text   TI2_Interrupt	(TI2_c.obj)
  00000462 0000001C .text   TI1_Init	(TI1_c.obj)
  0000047E 00000022 .text   TI1_Interrupt	(TI1_c.obj)
  000004A0 0000002E .text   SetRatio	(PWM2_c.obj)
  000004CE 00000014 .text   PWM2_SetRatio16	(PWM2_c.obj)
  000004E2 00000012 .text   PWM2_Init	(PWM2_c.obj)
  000004F4 0000002E .text   SetRatio	(PWM1_c.obj)
  00000522 00000014 .text   PWM1_SetRatio16	(PWM1_c.obj)
  00000536 00000020 .text   PWM1_Init	(PWM1_c.obj)
  00000556 00000026 .text   M2m_PutVal	(M2m_c.obj)
  0000057C 00000026 .text   M1m_PutVal	(M1m_c.obj)
  000005A2 00000002 .text   Cpu_Interrupt	(Cpu_c.obj)
  000005A4 0000007C .text   __initialize_hardware	(Cpu_c.obj)
  00000620 0000012A .text   PE_low_level_init	(Cpu_c.obj)
  0000074A 000000D4 .text   AS2_RecvChar	(AS2_c.obj)
  0000081E 000000B6 .text   AS2_SendChar	(AS2_c.obj)
  000008D4 000000D0 .text   AS2_InterruptRx	(AS2_c.obj)
  000009A4 000000BE .text   AS2_InterruptTx	(AS2_c.obj)
  00000A62 00000030 .text   AS2_InterruptError	(AS2_c.obj)
  00000A92 0000006E .text   AS2_Init	(AS2_c.obj)
  00000B00 000000B6 .text   AS1_SendChar	(AS1_c.obj)
  00000BB6 000000D0 .text   AS1_InterruptRx	(AS1_c.obj)
  00000C86 000000BE .text   AS1_InterruptTx	(AS1_c.obj)
  00000D44 00000030 .text   AS1_InterruptError	(AS1_c.obj)
  00000D74 0000006E .text   AS1_Init	(AS1_c.obj)
  00000DE2 0000006E .text   AD1_Interrupt	(AD1_c.obj)
  00000E50 0000000E .text   ClrSumV	(AD1_c.obj)
  00000E5E 0000002A .text   AD1_HWEnDi	(AD1_c.obj)
  00000E88 0000002A .text   AD1_Measure	(AD1_c.obj)
  00000EB2 00000034 .text   AD1_GetChanValue16	(AD1_c.obj)
  00000EE6 00000020 .text   AD1_Init	(AD1_c.obj)
  00000F06 00000002 .text   __initialize_system	(startcf_c.obj)
  00000F08 00000062 .text   __copy_rom_section	(startcf_c.obj)
  00000F6A 00000046 .text   __copy_rom_sections_to_ram	(startcf_c.obj)
  00000FB0 00000004 .text   _ExitProcess	(startcf_c.obj)
  00000FB4 00000210 .text   clear_mem	(startcf_c.obj)
  000011C4 00000090 .text   _startup	(startcf_c.obj)
  00001254 00000030 .text   main	(main_c.obj)
  00001284 0000003A .text   wait	(TIME_c.obj)
  000012BE 00000022 .text   setTimeout	(TIME_c.obj)
  000012E0 00000020 .text   timeout	(TIME_c.obj)
  00001300 0000003C .text   print	(PCCOM_c.obj)
  0000133C 00000048 .text   printLn	(PCCOM_c.obj)
  00001384 0000006E .text   printNum	(PCCOM_c.obj)
  000013F2 00000190 .text   itoa	(PCCOM_c.obj)
  00001582 00000054 .text   freeLeft	(MOTOR_c.obj)
  000015D6 00000054 .text   freeRight	(MOTOR_c.obj)
  0000162A 00000094 .text   freeRun	(MOTOR_c.obj)
  000016BE 00000046 .text   stopFreeRun	(MOTOR_c.obj)
  00001704 0000002A .text   TI2_OnInterrupt	(Events_c.obj)
  0000172E 00000002 .text   TI1_OnInterrupt	(Events_c.obj)
  00001730 00000002 .text   AD1_OnEnd	(Events_c.obj)
  00001732 00000002 .text   AS1_OnError	(Events_c.obj)
  00001734 00000002 .text   AS1_OnRxChar	(Events_c.obj)
  00001736 00000002 .text   AS1_OnTxChar	(Events_c.obj)
  00001738 00000002 .text   AS1_OnFullRxBuf	(Events_c.obj)
  0000173A 00000002 .text   AS1_OnFreeTxBuf	(Events_c.obj)
  0000173C 00000002 .text   AS2_OnError	(Events_c.obj)
  0000173E 00000036 .text   AS2_OnRxChar	(Events_c.obj)
  00001774 00000002 .text   AS2_OnTxChar	(Events_c.obj)
  00001776 00000002 .text   AS2_OnFullRxBuf	(Events_c.obj)
  00001778 00000002 .text   AS2_OnFreeTxBuf	(Events_c.obj)
  0000177A 00000050 .text   execMode	(CAR_c.obj)
  000017CA 0000000C .text   getMode	(CAR_c.obj)
  000017D6 00000234 .text   updateDoggyTrayectory	(CAR_c.obj)
  00001A0A 00000030 .text   startDoggy	(CAR_c.obj)
  00001A3A 000000A2 .text   car_Init	(CAR_c.obj)
  00001ADC 00000002 .text   handleError	(CAR_c.obj)
  00001ADE 000000FA .text   camCMDSync	(CAM_c.obj)
  00001BD8 00000052 .text   camTCMRawAsync	(CAM_c.obj)
  00001C2A 0000000C .text   _ewl_exit	(librt.a abort_exit.o   )
  00001C36 0000001C .text   __call_static_initializers	(librt.a cf_staticinitia)
  00001C52 0000002C .text   __destroy_global_chain	(librt.a cf_staticinitia)
  00001C7E 0000003E .text   __ldivu__	(librt.a cf_runtime.o   )
  00001CBC 00000034 .text   __ldiv__	(librt.a cf_runtime.o   )
  00001CF0 0000003C .text   __lmodu__	(librt.a cf_runtime.o   )
  00001D2C 00000034 .text   __lmod__	(librt.a cf_runtime.o   )
  00001D60 00000002 .rodata Channels	(AD1_c.obj)
  00001D62 0000000D .rodata @87	(CAR_c.obj)
  00001D6F 00000007 .rodata @139	(CAR_c.obj)
  00001D76 00000002 .rodata @140	(CAR_c.obj)
  00001D78 00000002 .rodata @141	(CAR_c.obj)
  00001D7A 00000005 .rodata @142	(CAR_c.obj)
  00001D7F 00000005 .rodata @143	(CAR_c.obj)
  00001D84 00000005 .rodata @144	(CAR_c.obj)
  00001D89 00000005 .rodata @145	(CAR_c.obj)
  00001D8E 00000005 .rodata @146	(CAR_c.obj)
  00001D93 00000005 .rodata @147	(CAR_c.obj)
  00001D98 00000005 .rodata @148	(CAR_c.obj)
  00001D9D 00000001 .rodata @149	(CAR_c.obj)
  00001D9E 00000025 .rodata @156	(CAR_c.obj)
  00001DC3 00000003 .rodata @157	(CAR_c.obj)
  00001DC6 00000016 .rodata @168	(CAR_c.obj)
  00001DDC 00000003 .rodata @169	(CAR_c.obj)
  00001DDF 0000001B .rodata @170	(CAR_c.obj)
  00001DFA 00000005 .rodata @171	(CAR_c.obj)
  00001DFF 00000017 .rodata @172	(CAR_c.obj)
  00001E16 00000009 .rodata @173	(CAR_c.obj)
  00001E1F 0000000F .rodata @174	(CAR_c.obj)
  00001E2E 00000022 .rodata @175	(CAR_c.obj)
  00001E50 00000005 .rodata @176	(CAR_c.obj)
  00001E55 00000021 .rodata @177	(CAR_c.obj)
  00001E76 00000005 .rodata @178	(CAR_c.obj)
  00001E7B 00000020 .rodata @179	(CAR_c.obj)
  00001E9B 00000005 .rodata @180	(CAR_c.obj)
#>00001EA0          ___ROM_AT (linker command file)
#>00001EA0          ___DATA_ROM (linker command file)

# .data
#>00800000          ___DATA_RAM (linker command file)
#>00800000          __exception_table_start__ (linker command file)
# Exception index
  00800000 00000000         Exception Table Index	()
#>00800000          __exception_table_end__ (linker command file)
#>00800000          ___sinit__ (linker command file)
# Linker generated symbols
  00800000 00000004         static initializer	(linker generated)
#>00800004          __START_DATA (linker command file)
#>00800004          __END_DATA (linker command file)
#>00800004          __START_SDATA (linker command file)
  00800004 00000001 .sdata  freeRunLeft	(MOTOR_c.obj)
  00800005 00000001 .sdata  freeRunRight	(MOTOR_c.obj)
  00800006 00000001 .sdata  nextMode	(CAR_c.obj)
#>00800008          __END_SDATA (linker command file)
#>00800008          ___DATA_END (linker command file)
#>00800008          __SDA_BASE (linker command file)

# .bss
#>00800008          ___BSS_START (linker command file)
#>00800008          __START_SBSS (linker command file)
  00800008 00000002 .sbss   ActualRatio	(PWM2_c.obj)
  0080000A 00000002 .sbss   ActualRatio	(PWM1_c.obj)
  0080000C 00000001 .sbss   SR_lock	(Cpu_c.obj)
  0080000D 00000001 .sbss   OnFreeTxBuf_semaphore	(AS2_c.obj)
  0080000E 00000064 .sbss   OutBuffer	(AS2_c.obj)
  00800072 00000001 .sbss   OutIndxW	(AS2_c.obj)
  00800073 00000001 .sbss   OutIndxR	(AS2_c.obj)
  00800074 00000001 .sbss   AS2_OutLen	(AS2_c.obj)
  00800075 00000064 .sbss   InpBuffer	(AS2_c.obj)
  008000D9 00000001 .sbss   InpIndxW	(AS2_c.obj)
  008000DA 00000001 .sbss   InpIndxR	(AS2_c.obj)
  008000DB 00000001 .sbss   AS2_InpLen	(AS2_c.obj)
  008000DC 00000001 .sbss   SerFlag	(AS2_c.obj)
  008000DD 00000001 .sbss   OnFreeTxBuf_semaphore	(AS1_c.obj)
  008000DE 00000064 .sbss   OutBuffer	(AS1_c.obj)
  00800142 00000001 .sbss   OutIndxW	(AS1_c.obj)
  00800143 00000001 .sbss   OutIndxR	(AS1_c.obj)
  00800144 00000001 .sbss   AS1_OutLen	(AS1_c.obj)
  00800145 00000064 .sbss   InpBuffer	(AS1_c.obj)
  008001A9 00000001 .sbss   InpIndxW	(AS1_c.obj)
  008001AA 00000001 .sbss   InpIndxR	(AS1_c.obj)
  008001AB 00000001 .sbss   AS1_InpLen	(AS1_c.obj)
  008001AC 00000001 .sbss   SerFlag	(AS1_c.obj)
  008001AE 00000004 .sbss   AD1_OutV	(AD1_c.obj)
  008001B2 00000001 .sbss   ModeFlg	(AD1_c.obj)
  008001B3 00000001 .sbss   SumChan	(AD1_c.obj)
  008001B4 00000001 .sbss   OutFlg	(AD1_c.obj)
  008001B6 00000002 .sbss   waitMark	(TIME_c.obj)
  008001B8 00000002 .sbss   timeoutMark	(TIME_c.obj)
  008001BA 00000002 .sbss   timeoutCap	(TIME_c.obj)
  008001BC 00000001 .sbss   waitFlag	(TIME_c.obj)
  008001BD 00000001 .sbss   timeoutFlag	(TIME_c.obj)
  008001BE 00000002 .sbss   msCount	(Events_c.obj)
  008001C0 00000002 .sbss   camFlag	(Events_c.obj)
  008001C2 00000002 .sbss   camRxBufCount	(Events_c.obj)
  008001C4 0000001E .sbss   camRxBuf	(Events_c.obj)
  008001E2 00000002 .sbss   sharpRes	(CAR_c.obj)
  008001E4 00000002 .sbss   duty	(CAR_c.obj)
  008001E6 00000001 .sbss   sharpOK	(CAR_c.obj)
  008001E8 00000002 .sbss   sharpCount	(CAR_c.obj)
  008001EA 0000001E .sbss   itoaBuf	(CAR_c.obj)
  00800208 00000001 .sbss   modeFlag	(CAR_c.obj)
#>0080020C          __END_SBSS (linker command file)
#>0080020C          __START_BSS (linker command file)
  0080020C 00000002 .bss    SR_reg	(Cpu_c.obj)
  00800210 00000004 .bss    __global_destructor_chain	(librt.a cf_staticinitia)
#>00800214          __END_BSS (linker command file)
#>00800214          ___BSS_END (linker command file)

# .custom
#>00800214          ___HEAP_START (linker command file)
#>00800214          ___heap_addr (linker command file)
#>00800614          ___HEAP_END (linker command file)
#>00800614          ___SP_END (linker command file)
#>00800A14          ___SP_INIT (linker command file)
#>00800614          ___mem_limit (linker command file)
#>00000010          ___stack_safety (linker command file)
#>00800A14          __SP_INIT (linker command file)
#>00800A14          ___SP_AFTER_RESET (linker command file)
#>00001EA8          _romp_at (linker command file)

# .romp
#>00001EA8          __S_romp (linker command file)


# Memory map:
  v_addr   p_addr   size     name
  00000000 00000000 0000019C .abs__InterruptVectorTable abs__InterruptVectorTable
  0000040D 0000040D 00000001 .abs_NVPROT_INIT abs_NVPROT_INIT
  0000040F 0000040F 00000001 .abs_NVOPT_INIT abs_NVOPT_INIT
  00000410 00000410 00000000 .code      code
  00000410 00000410 00001A90 .text      code
  00800000 00800000 00000000 .userram   userram
  00800000 00001EA0 00000008 .data      userram
  00800008 00800008 0000020C .bss       userram
  00800214 00800214 00000000 .custom    userram
  00800214 00001EA8 00000018 .romp      userram

# Link start time: Wed Jun 27 12:47:41 2018
# Link end time: Wed Jun 27 12:47:41 2018
